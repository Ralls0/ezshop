@startuml
class Administrator {

}
class AccountBook {

}
class Cashier {

}
class CreditCardCircuit {

}
class Credit {

}
class Customer {
    Integer id
    String name
    LoyaltyCard card

    'setId()
    getId()
    setName()
    getName()
    setSurname()
    getSurname()

}
class Debit {

}
class FinancialTransaction {
    description
    amount
    date
}
class LoyaltyCard {
    String id
    int points

    'getId()
    'setId()
    getPoints()
    setPoints()
    
}

class Order {
    Integer orderId
    String supplier
    String productCode
    double pricePerUnit
    int quantity
    String status
}

class ProductType{
    Integer id
    String productCode
    String description
    double pricePerUnit
    String note
    int quantity
    Position position
}

class Position {
    String aisleID
    String rackID
    String levelID
}

class Return {

}

class ReturnTransaction {
    int quantity
    Integer returnId
    float returnedValue
}

class ProductQuantityAndDiscount {
    Integer quantity
    double discountRate
    ProductType product
}

class SaleTransaction {
    Integer ID 
    List<ProductQuantityAndDiscount> products
    String date
    String time
    double cost
    String paymentType
    double discountRate
    LoyaltyCard customerCard
    Ticket ticket

    Integer computePoints()
}

class Sale {

}

class Shop {
    +void reset()
    +Integer createUser(String username, String password, String role)
    +boolean deleteUser(Integer id)
    +List<User> getAllUsers()
    +User getUser(Integer id)
    +boolean updateUserRights(Integer id, String role)
    +User login(String username, String password)
    +boolean logout();
    +Integer createProductType(String description, String productCode, double pricePerUnit, String note)
    +boolean updateProduct(Integer id, String newDescription, String newCode, double newPrice, String newNote)
    +boolean deleteProductType(Integer id)
    +List<ProductType> getAllProductTypes()
    +ProductType getProductTypeByBarCode(String productCode)
    +List<ProductType> getProductTypesByDescription(String description)
    +boolean updateQuantity(Integer id, int toBeAdded)
    +boolean updatePosition(Integer id, String newPos)
    '+boolean updatePosition(Integer id, Position newPos)
    +Integer issueReorder(String productCode, int quantity, double pricePerUnit)
    +Integer payOrderFor(String productCode, int quantity, double pricePerUnit)
    +boolean payOrder(Integer orderId)
    +boolean recordOrderArrival(Integer orderId)
    +List<Order> getAllOrders()
    +Integer defineCustomer(String customerName)
    +boolean modifyCustomer(Integer id, String newCustomerName, String newCustomerCard)
    +boolean deleteCustomer(Integer id)
    +Customer getCustomer(Integer id)
    +List<Customer> getAllCustomers()
    +String createCard()
    +boolean attachCardToCustomer(String customerCard, Integer customerId)
    +boolean modifyPointsOnCard(String customerCard, int pointsToBeAdded)
    +Integer startSaleTransaction()
    +boolean addProductToSale(Integer transactionId, String productCode, int amount)
    +boolean deleteProductFromSale(Integer transactionId, String productCode, int amount)
    +boolean applyDiscountRateToProduct(Integer transactionId, String productCode, double discountRate)
    +boolean applyDiscountRateToSale(Integer transactionId, double discountRate)
    +int computePointsForSale(Integer transactionId)
    +boolean attachCardToSaleTransaction(Integer transactionId, String customerCard)
    +boolean closeSaleTransaction(Integer transactionId)
    +boolean deleteSaleTicket(Integer ticketNumber)
    +Ticket getSaleTicket(Integer transactionId)
    +Ticket getTicketByNumber(Integer ticketNumber)
    +Integer startReturnTransaction(Integer ticketNumber)
    +boolean returnProduct(Integer returnId, String productCode, int amount)
    +boolean endReturnTransaction(Integer returnId, boolean commit)
    +boolean deleteReturnTransaction(Integer returnId)
    +double receiveCashPayment(Integer ticketNumber, double cash)
    +boolean receiveCreditCardPayment(Integer ticketNumber, String creditCard)
    +double returnCashPayment(Integer returnId)
    +double returnCreditCardPayment(Integer returnId, String creditCard)
    +boolean recordBalanceUpdate(double toBeAdded)
    +List<BalanceOperation> getCreditsAndDebits(LocalDate from, LocalDate to)
    +double computeBalance()





}
class ShopManager {

}
class Supplier {

}

class Ticket {
    Integer ticketNumber
}

class User {
    Integer id
    String role
    String password
    String username

    getRole()
    setRole()
}

AccountBook - Shop
AccountBook -- "*" FinancialTransaction

Cashier --|> User

Administrator --|> User

ShopManager --|> User

User -- Shop

CreditCardCircuit -- Shop

Supplier -- Shop

Credit --|> FinancialTransaction

Debit --|> FinancialTransaction

Order --|> Debit
Order "*" - ProductType

Sale --|> Credit
Return --|> Debit

Shop - "*" ProductType
SaleTransaction - "*" ProductType
(SaleTransaction, ProductType)  .. Quantity

LoyaltyCard "0..1" --> Customer

SaleTransaction "*" -- "0..1" LoyaltyCard

ProductType - "0..1" Position
ProductType -- "*" Product : describes

ReturnTransaction "*" - SaleTransaction
ReturnTransaction "*" - ProductType
@enduml